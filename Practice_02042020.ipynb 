{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = [[1, 2104, 5, 1, 45], [1, 1416, 3, 2, 40], [1, 1534, 3, 2, 30], [1, 852, 2, 1, 36]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[1, 2104, 5, 1, 45],\n",
       " [1, 1416, 3, 2, 40],\n",
       " [1, 1534, 3, 2, 30],\n",
       " [1, 852, 2, 1, 36]]"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = np.array([[460, 232, 315, 178]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = np.swapaxes(y, 0, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[460],\n",
       "       [232],\n",
       "       [315],\n",
       "       [178]])"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [],
   "source": [
    "def transpose(M):\n",
    "    W = []\n",
    "    for j in range(len(M[0])):\n",
    "        u = []\n",
    "        for i in range(len(M)):\n",
    "            u.append(M[i][j])\n",
    "        W.append(u)\n",
    "    return W"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [],
   "source": [
    "def dot(M, v):\n",
    "    u = []\n",
    "    for i in range(len(M)):\n",
    "        temp = 0.0\n",
    "        for j in range(len(M[0])):\n",
    "            temp = temp + M[i][j] * v[j]\n",
    "        u.append(temp)\n",
    "    return u"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mult(M, V):\n",
    "    U = []\n",
    "    for i in range(len(M)):\n",
    "        temp = []\n",
    "        for j in range(len(M[0])):\n",
    "            temp.append(M[i][j] * V[i][j])\n",
    "        U.append(temp)\n",
    "    return U"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mult2(M, V):\n",
    "    U = [[0, 0, 0, 0, 0],\n",
    "         [0, 0, 0, 0, 0],\n",
    "         [0, 0, 0, 0, 0],\n",
    "         [0, 0, 0, 0, 0],\n",
    "         [0, 0, 0, 0, 0]]\n",
    "    for i in range(len(M)):\n",
    "        for j in range(len(V[0])):\n",
    "            for k in range((len(V))):\n",
    "                U[i][j] += M[i][k] * V[k][j]\n",
    "    return U"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [],
   "source": [
    "XT = transpose(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[4, 5906, 13, 6, 151],\n",
       " [5906, 9510932, 21074, 8856, 228012],\n",
       " [13, 21074, 47, 19, 507],\n",
       " [6, 8856, 19, 10, 221],\n",
       " [151, 228012, 507, 221, 5821]]"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mult2(XT, X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Formula : theta = (X^T * X)^-1 * X^Ty"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "theta = (np.linalg.matrix_power(mult2(XT, X), -1)) * (dot(XT, y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.31608118e+18,  6.18265507e+15, -2.79909404e+18,\n",
       "        -9.79744740e+17,  7.29553298e+16],\n",
       "       [ 1.00759956e+19, -4.73347741e+16,  2.14300301e+19,\n",
       "         7.50098387e+18, -5.58550334e+17],\n",
       "       [-1.01499638e+19,  4.76822602e+16, -2.15873486e+19,\n",
       "        -7.55604883e+18,  5.62650670e+17],\n",
       "       [-1.43199822e+18,  6.72720742e+15, -3.04563104e+18,\n",
       "        -1.06603814e+18,  7.93810475e+16],\n",
       "       [ 2.82204760e+18, -1.32573486e+16,  6.00204362e+18,\n",
       "         2.10084784e+18, -1.56436713e+17]])"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "theta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
